ISA:

16-bit instructions

---

NOP: Skips instruction

Assembly: NOP
Equivalent: nop
0000_xxxxxxxxxxx

===== Type R instructions ====
 ____________________
|xxxx|sss|ttt|ddd|000|
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

ADD: Adds two registers

Assembly: ADD $rd,$rs,$rt
Equivalent: $rd = $rs + $rt
Encoding: 0001_sss_ttt_ddd_xxx

---

SUB: Subtracts two registers

Assembly: SUB $rd,$rs,$rt
Equivalent: $rd = $rs + $rt
Encoding: 0010_sss_ttt_ddd_xxx

---

SLT: Set if Less Than

Assembly: SLT $rd,$rs,$rt
Equivalent: $rd = $rs < $rt ? 0x1 : 0x0
Encoding: 0011_sss_ttt_ddd_xxx

---

SW: Store Word - Saves value in a RAM address
Assembly: SW $rt,($rs)
Equivalent: RAM[$rs] = $rt
Encoding: 0100_sss_ttt_xxxxxx


===== Type I instructions ====
 ___________________
|xxxx|sss|ttt|iiiiii|
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

ADDI: Adds register with immediate

Assembly: ADDI $rt,$rs,Imm
Equivalent: $rt = $rs + Imm
Encoding: 1000_sss_ttt_iiiiii

---

BEQ: Jumps to a instruction if both registers are equal. Relative Jump
Assembly: BEQ $rt,$rs,Imm
Equivalent: if ($rt == $rs) { PC = PC + 1 + Imm }
Encoding: 1100_sss_ttt_iiiiii

===== Type J instructions =====
 _________________
|xxxx|iiiiiiiiiiii|
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

J: Absolute jump

Assembly: J Imm
Encoding: 1111_iiiiiiiiiiii

---